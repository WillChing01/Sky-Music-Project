{"ast":null,"code":"import { listArrOfStrsAsStr } from \"./format/formatArr\";\nimport { makeSingular } from \"./format/formatStr\";\n/**\r\n * channel = {track, album, artist}\r\n*/\n\nconst getQueryURL = (query, channel, limit) => {\n  const limitParam = limit ? `&per_type_limit=${limit}` : '';\n  const queryURL = `https://api.napster.com/v2.2/search/verbose?type=${makeSingular(channel)}&query=${query}${limitParam}`;\n  return queryURL;\n};\n\nexport const getQueryFetchInfo = (query, channel, limit) => {\n  const queryKeys = ['search', 'data', channel];\n  const queryURL = getQueryURL(query, channel, limit);\n  return [queryURL, queryKeys];\n};\n\nconst getChannelTopURL = (channel, limit) => {\n  const limitParam = limit ? `?limit=${limit}` : '';\n  const channelTopURL = `https://api.napster.com/v2.2/${channel}/top${limitParam}`;\n  return channelTopURL;\n};\n\nconst getArtistsURL = artistIds => {\n  const idsStr = listArrOfStrsAsStr(artistIds, ',');\n  const idsPath = idsStr && `/${idsStr}`;\n  const artistsURL = `https://api.napster.com/v2.2/artists${idsPath}`;\n  return artistsURL;\n};\n\nexport const getArtistsInfo = artistIds => {\n  const artistsKeys = ['artists'];\n  const artistsURL = getArtistsURL(artistIds);\n  return [artistsURL, artistsKeys];\n};\n/**\r\n * channel = {tracks, albums, artists}\r\n */\n\nexport const getChannelTopInfo = (channel, limit) => {\n  const channelTopKeys = [channel];\n  const channelTopURL = getChannelTopURL(channel, limit);\n  return [channelTopURL, channelTopKeys];\n};\nexport const getDataByKeys = (candidate, keys) => {\n  return keys.reduce((currentObj, nextKey) => currentObj[nextKey], candidate);\n};\n\nconst getGenresURL = genresIds => {\n  const idsStr = listArrOfStrsAsStr(genresIds, ',');\n  const idsPath = idsStr && `/${idsStr}`;\n  const genresURL = `https://api.napster.com/v2.2/genres${idsPath}`;\n  return genresURL;\n};\n\nexport const getGenresInfo = genresIds => {\n  const genresKeys = ['genres'];\n  const genresURL = getGenresURL(genresIds);\n  return [genresURL, genresKeys];\n};\n\nconst getAlbumTracksURL = albumId => {\n  const albumTracksURL = `https://api.napster.com/v2.2/albums/${albumId}/tracks`;\n  return albumTracksURL;\n};\n\nexport const getAlbumTracksInfo = albumId => {\n  const albumTracksKeys = ['tracks'];\n  const albumTracksURL = getAlbumTracksURL(albumId);\n  return [albumTracksURL, albumTracksKeys];\n};\nexport const getIsFetchResolved = fetchResult => {\n  const hasItems = !!fetchResult.items.length;\n  const hasError = !!fetchResult.error.statusCode;\n  return hasItems || hasError;\n};\nexport const getAreFetchesResolved = function () {\n  for (var _len = arguments.length, fetchResults = new Array(_len), _key = 0; _key < _len; _key++) {\n    fetchResults[_key] = arguments[_key];\n  }\n\n  for (const fetchResult of fetchResults) {\n    const isFetchResolved = getIsFetchResolved(fetchResult);\n    if (!isFetchResolved) return false;\n  }\n\n  return true;\n};","map":{"version":3,"names":["listArrOfStrsAsStr","makeSingular","getQueryURL","query","channel","limit","limitParam","queryURL","getQueryFetchInfo","queryKeys","getChannelTopURL","channelTopURL","getArtistsURL","artistIds","idsStr","idsPath","artistsURL","getArtistsInfo","artistsKeys","getChannelTopInfo","channelTopKeys","getDataByKeys","candidate","keys","reduce","currentObj","nextKey","getGenresURL","genresIds","genresURL","getGenresInfo","genresKeys","getAlbumTracksURL","albumId","albumTracksURL","getAlbumTracksInfo","albumTracksKeys","getIsFetchResolved","fetchResult","hasItems","items","length","hasError","error","statusCode","getAreFetchesResolved","fetchResults","isFetchResolved"],"sources":["C:/Users/adamg/Documents/temp/sky/Sky-Music-Project/my-app/src/utility/fetchNapster.js"],"sourcesContent":["import { listArrOfStrsAsStr } from \"./format/formatArr\";\r\nimport { makeSingular } from \"./format/formatStr\";\r\n\r\n/**\r\n * channel = {track, album, artist}\r\n*/\r\nconst getQueryURL = (query, channel, limit) => {\r\n  const limitParam = limit ? `&per_type_limit=${limit}` : '';\r\n  const queryURL = `https://api.napster.com/v2.2/search/verbose?type=${makeSingular(channel)}&query=${query}${limitParam}`;\r\n  return queryURL;\r\n};\r\n\r\nexport const getQueryFetchInfo = (query, channel, limit) => {\r\n  const queryKeys = ['search', 'data', channel];\r\n  const queryURL = getQueryURL(query, channel, limit);\r\n  return [queryURL, queryKeys];\r\n};\r\n\r\nconst getChannelTopURL = (channel, limit) => {\r\n  const limitParam = limit ? `?limit=${limit}` : '';\r\n  const channelTopURL = `https://api.napster.com/v2.2/${channel}/top${limitParam}`;\r\n  return channelTopURL;\r\n};\r\n\r\nconst getArtistsURL = (artistIds) => {\r\n  const idsStr = listArrOfStrsAsStr(artistIds, ',');\r\n  const idsPath = idsStr && `/${idsStr}`;\r\n  const artistsURL = `https://api.napster.com/v2.2/artists${idsPath}`;\r\n  return artistsURL;\r\n};\r\n\r\nexport const getArtistsInfo = (artistIds) => {\r\n  const artistsKeys = ['artists'];\r\n  const artistsURL = getArtistsURL(artistIds);\r\n  return [artistsURL, artistsKeys];\r\n};\r\n\r\n\r\n/**\r\n * channel = {tracks, albums, artists}\r\n */\r\nexport const getChannelTopInfo = (channel, limit) => {\r\n  const channelTopKeys = [channel];\r\n  const channelTopURL = getChannelTopURL(channel, limit);\r\n  return [channelTopURL, channelTopKeys];\r\n};\r\n\r\nexport const getDataByKeys = (candidate, keys) => {\r\n  return keys.reduce((currentObj, nextKey) => currentObj[nextKey], candidate);\r\n};\r\n\r\nconst getGenresURL = (genresIds) => {\r\n  const idsStr = listArrOfStrsAsStr(genresIds, ',');\r\n  const idsPath = idsStr && `/${idsStr}`;\r\n  const genresURL = `https://api.napster.com/v2.2/genres${idsPath}`;\r\n  return genresURL;\r\n};\r\n\r\nexport const getGenresInfo = (genresIds) => {\r\n  const genresKeys = ['genres'];\r\n  const genresURL = getGenresURL(genresIds);\r\n  return [genresURL, genresKeys];\r\n};\r\n\r\nconst getAlbumTracksURL = (albumId) => {\r\n  const albumTracksURL = `https://api.napster.com/v2.2/albums/${albumId}/tracks`;\r\n  return albumTracksURL;\r\n};\r\n\r\n\r\nexport const getAlbumTracksInfo = (albumId) => {\r\n  const albumTracksKeys = ['tracks'];\r\n  const albumTracksURL = getAlbumTracksURL(albumId);\r\n  return [albumTracksURL, albumTracksKeys];\r\n};\r\n\r\n\r\nexport const getIsFetchResolved = (fetchResult) => {\r\n  const hasItems = !!fetchResult.items.length;\r\n  const hasError = !!fetchResult.error.statusCode;\r\n  return hasItems || hasError;\r\n};\r\n\r\nexport const getAreFetchesResolved = (...fetchResults) => {\r\n  for (const fetchResult of fetchResults) {\r\n      const isFetchResolved = getIsFetchResolved(fetchResult);\r\n      if (!isFetchResolved) return false;\r\n  }\r\n  return true;\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}