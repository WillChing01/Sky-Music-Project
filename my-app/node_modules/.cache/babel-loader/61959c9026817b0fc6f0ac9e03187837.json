{"ast":null,"code":"const getImgInfo = item => {\n  const isTrack = item.type === 'track';\n  const isArtist = item.type === 'artist';\n  const id = isTrack ? item.albumId : item.id;\n  const [type, size] = isArtist ? ['artists', '633x422'] : ['albums', '500x500'];\n  return {\n    id,\n    type,\n    size\n  };\n};\n\nconst getDisplayedArtist = item => {\n  const hasArtistName = ('artistName' in item);\n  const displayedName = hasArtistName ? item.artistName : '';\n  return displayedName;\n};\n\nconst getPlayable = item => {\n  const isTrack = item.type === 'track';\n  return isTrack;\n};\n\nconst getImgSrc = item => {\n  const {\n    id,\n    type,\n    size\n  } = getImgInfo(item);\n  return `https://api.napster.com/imageserver/v2/${type}/${id}/images/${size}.jpg`;\n};\n\nconst getPreviewURL = item => {\n  const hasPreview = ('previewURL' in item);\n  const previewURL = hasPreview ? item.previewURL : '';\n  return previewURL;\n};\n\nconst getNumTracks = item => {\n  if (item.type === 'album') return item.trackCount;else if (item.type === 'track') return 1;else return 0;\n};\n\nconst getIsExplicit = item => {\n  if (item.type === 'track') return item.isExplicit;else if (item.type === 'album') return item.tags.includes('Explicit');else return false;\n};\n\nconst getReleaseDate = item => {\n  if (item.type === 'artist') return null;else {\n    const releaseDate = new Date(item.released);\n    const formatDateOptions = {\n      day: 'numeric',\n      month: 'long',\n      year: 'numeric'\n    };\n    const formattedReleaseDate = releaseDate.toLocaleDateString(\"en-US\", formatDateOptions);\n    return formattedReleaseDate;\n  }\n};\n\nconst getFeaturedArtists = item => {\n  if (item.type === 'album') {\n    const features = item.contributingArtists.featuredPerformer;\n    if (features) return features;\n  }\n\n  return null;\n};\n\nconst getGenres = item => {\n  const genresExist = item.links.genres;\n  if (!genresExist) return [];else return genresExist.ids;\n};\n\nexport const getItemInfo = item => {\n  const id = item.id;\n  const name = item.name;\n  const type = item.type;\n  const genres = getGenres(item);\n  const imgSrc = getImgSrc(item);\n  const artist = getDisplayedArtist(item);\n  const playable = getPlayable(item);\n  const previewURL = getPreviewURL(item);\n  const numTracks = getNumTracks(item);\n  const isExplicit = getIsExplicit(item);\n  const releaseDate = getReleaseDate(item);\n  const features = getFeaturedArtists(item);\n  return {\n    id,\n    name,\n    type,\n    genres,\n    imgSrc,\n    artist,\n    playable,\n    previewURL,\n    numTracks,\n    isExplicit,\n    releaseDate,\n    features\n  };\n};\nexport const getPlaylistInfo = items => {\n  return items.map(item => {\n    const info = getItemInfo(item);\n    return {\n      currentPreviewURL: info.previewURL,\n      name: info.name,\n      artistName: info.artist,\n      imgSrc: info.imgSrc\n    };\n  });\n};","map":{"version":3,"names":["getImgInfo","item","isTrack","type","isArtist","id","albumId","size","getDisplayedArtist","hasArtistName","displayedName","artistName","getPlayable","getImgSrc","getPreviewURL","hasPreview","previewURL","getNumTracks","trackCount","getIsExplicit","isExplicit","tags","includes","getReleaseDate","releaseDate","Date","released","formatDateOptions","day","month","year","formattedReleaseDate","toLocaleDateString","getFeaturedArtists","features","contributingArtists","featuredPerformer","getGenres","genresExist","links","genres","ids","getItemInfo","name","imgSrc","artist","playable","numTracks","getPlaylistInfo","items","map","info","currentPreviewURL"],"sources":["C:/Users/adamg/Documents/temp/sky/Sky-Music-Project/my-app/src/utility/parseMusicItem.js"],"sourcesContent":["const getImgInfo = (item) => {\r\n    const isTrack = item.type === 'track';\r\n    const isArtist = item.type === 'artist';\r\n    const id = isTrack ? \r\n               item.albumId :\r\n               item.id; \r\n    const [type, size] = isArtist ? \r\n                        ['artists','633x422']: \r\n                        ['albums', '500x500'];\r\n    return {id, type, size}\r\n};\r\n\r\nconst getDisplayedArtist = (item) => {\r\n    const hasArtistName = 'artistName' in item;\r\n    const displayedName = hasArtistName ?\r\n                          item.artistName:\r\n                          '';\r\n    return displayedName;\r\n};\r\n\r\nconst getPlayable = (item) => {\r\n    const isTrack = item.type === 'track'\r\n    return isTrack;\r\n};\r\n\r\nconst getImgSrc = (item) => {\r\n    const {id, type, size} = getImgInfo(item);\r\n    return `https://api.napster.com/imageserver/v2/${type}/${id}/images/${size}.jpg`;\r\n};\r\n\r\nconst getPreviewURL = (item) => {\r\n    const hasPreview = 'previewURL' in item;\r\n    const previewURL = hasPreview ?\r\n                       item.previewURL:\r\n                       '';\r\n    return previewURL;\r\n};\r\n\r\nconst getNumTracks = (item) => {\r\n    if (item.type === 'album') return item.trackCount;\r\n    else if (item.type === 'track') return 1; \r\n    else return 0;\r\n}\r\n\r\nconst getIsExplicit = (item) => {\r\n    if (item.type === 'track') return item.isExplicit;\r\n    else if (item.type === 'album') return item.tags.includes('Explicit');\r\n    else return false;\r\n}\r\n\r\nconst getReleaseDate = (item) => {\r\n    if (item.type === 'artist') return null;\r\n    else {\r\n        const releaseDate = new Date(item.released);\r\n        const formatDateOptions = { day: 'numeric', month: 'long', year: 'numeric' };\r\n        const formattedReleaseDate = releaseDate.toLocaleDateString(\"en-US\", formatDateOptions);\r\n        return formattedReleaseDate;\r\n    }\r\n};\r\n\r\nconst getFeaturedArtists = (item) => {\r\n    if (item.type === 'album') {\r\n        const features = item.contributingArtists.featuredPerformer;\r\n        if (features) return features;\r\n    }\r\n    return null;\r\n};\r\n\r\nconst getGenres = (item) => {\r\n    const genresExist = item.links.genres;\r\n    if(!genresExist) return [];\r\n    else return genresExist.ids;\r\n};\r\n\r\n\r\nexport const getItemInfo = (item) => {\r\n    const id = item.id;\r\n    const name = item.name;\r\n    const type = item.type;\r\n    const genres = getGenres(item);\r\n    const imgSrc = getImgSrc(item);\r\n    const artist = getDisplayedArtist(item);\r\n    const playable = getPlayable(item);\r\n    const previewURL = getPreviewURL(item);\r\n    const numTracks = getNumTracks(item);\r\n    const isExplicit = getIsExplicit(item);\r\n    const releaseDate = getReleaseDate(item);\r\n    const features = getFeaturedArtists(item);\r\n\r\n    return {\r\n      id, \r\n      name,\r\n      type,\r\n      genres,\r\n      imgSrc,\r\n      artist,\r\n      playable,\r\n      previewURL,\r\n      numTracks,\r\n      isExplicit,\r\n      releaseDate,\r\n      features\r\n    };\r\n};\r\n\r\nexport const getPlaylistInfo = (items) => {\r\n    return items.map(item => {\r\n        const info = getItemInfo(item);\r\n        return {\r\n            currentPreviewURL: info.previewURL,\r\n            name: info.name,\r\n            artistName: info.artist,\r\n            imgSrc: info.imgSrc,\r\n        }\r\n    })\r\n} "],"mappings":"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"},"metadata":{},"sourceType":"module"}