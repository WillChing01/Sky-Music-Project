{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adamg\\\\Documents\\\\temp\\\\sky\\\\Sky-Music-Project\\\\my-app\\\\src\\\\components\\\\ProgressBar\\\\ProgressBar.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { getPlayerAudio, setPlayerAudioCurrentTime } from '../Player/Player';\nimport { formatTime } from '../../utility/format/formatBarTime';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleIsPlaying } from '../../state/slices/playerConfig/playerConfigSlice';\nimport './ProgressBar.css'; // refreshTimePeriod in milliseconds.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst refreshTimePeriod = 10;\nconst tinyFraction = 0.0001;\n\nconst ProgressBar = () => {\n  _s();\n\n  //songDuration is length in seconds.\n  //songProgress is fraction of way through song.\n  const [songDuration, setSongDuration] = useState(0);\n  const [songProgress, setSongProgress] = useState(0);\n  const [isDragging, setIsDragging] = useState(false);\n  const [didPlayingChange, setDidPlayingChange] = useState(false);\n  const isPlaying = useSelector(state => state.playerConfig.isPlaying);\n  const dispatch = useDispatch();\n\n  const updateSongProgress = () => {\n    const playerAudio = getPlayerAudio();\n    const currentSongTime = playerAudio.currentTime;\n    const newSongDuration = playerAudio.duration;\n    const isSomeTrackLoaded = !isNaN(newSongDuration);\n\n    if (isSomeTrackLoaded) {\n      const newSongProgress = currentSongTime / newSongDuration;\n      setSongDuration(newSongDuration);\n      setSongProgress(newSongProgress);\n    }\n  };\n\n  const getProgressBar = () => {\n    return document.getElementById('progress-bar');\n  };\n\n  const getProgressBarBackground = () => {\n    return document.getElementById('progress-bar-background');\n  };\n\n  const getFractionIntoProgressBar = (pixelsIn, barWidth) => {\n    if (pixelsIn < 0) {\n      return 0;\n    } else if (pixelsIn > barWidth) {\n      return 1 - tinyFraction;\n    } else {\n      return pixelsIn / barWidth;\n    }\n  };\n\n  const getProgressBackgroundRect = () => {\n    const progressBackground = getProgressBarBackground();\n    const backgroundRect = progressBackground.getBoundingClientRect();\n    return backgroundRect;\n  };\n\n  const getClientRectWidth = rect => {\n    const width = rect.right - rect.left;\n    return width;\n  };\n\n  const getPixelsIntoRect = (MouseEvent, rect) => {\n    return MouseEvent.clientX - rect.left;\n  };\n\n  const setSongPosition = MouseEvent => {\n    //get position of mouse\n    const progBackgrRect = getProgressBackgroundRect();\n    const progBackgrWidth = getClientRectWidth(progBackgrRect);\n    const pixelsIntoProgrBackgr = getPixelsIntoRect(MouseEvent, progBackgrRect);\n    const fractionIntoProgressBar = getFractionIntoProgressBar(pixelsIntoProgrBackgr, progBackgrWidth);\n    const isSomeTrackLoaded = songDuration !== 0;\n\n    if (isSomeTrackLoaded) {\n      const newTime = fractionIntoProgressBar * songDuration;\n      setPlayerAudioCurrentTime(newTime);\n    }\n  };\n\n  const handleMouseDown = e => {\n    e.preventDefault();\n    setSongPosition(e);\n    setIsDragging(true);\n    toggleTextSelect();\n\n    if (isPlaying) {\n      setDidPlayingChange(true);\n      dispatch(toggleIsPlaying());\n    }\n  };\n\n  const toggleTextSelect = () => {\n    document.getElementById('root').classList.toggle('dragging-progress-bar');\n  };\n\n  const handleMouseUp = useCallback(e => {\n    setIsDragging(false);\n    toggleTextSelect();\n\n    if (didPlayingChange) {\n      setDidPlayingChange(false);\n      dispatch(toggleIsPlaying());\n    }\n  }, [didPlayingChange]);\n  const handleMouseMove = useCallback(e => {\n    if (isDragging) {\n      setSongPosition(e);\n    }\n  }, [isDragging, songDuration]);\n  useEffect(() => {\n    const updateMouseEventListeners = () => {\n      if (isDragging) {\n        document.addEventListener('mousemove', handleMouseMove);\n        document.addEventListener('mouseup', handleMouseUp);\n      }\n\n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n    };\n\n    return updateMouseEventListeners();\n  }, [isDragging]);\n  useEffect(() => {\n    const refreshBarInterval = setInterval(() => {\n      updateSongProgress();\n    }, refreshTimePeriod);\n    return () => clearInterval(refreshBarInterval);\n  }, []);\n  useEffect(() => {\n    const updateProgressBarWidth = () => {\n      const progressBar = getProgressBar();\n      const songProgressPercentage = songProgress * 100;\n      const songProgressPercentageStr = String(songProgressPercentage) + '%';\n      progressBar.style.width = songProgressPercentageStr;\n    };\n\n    updateProgressBarWidth();\n  }, [songProgress]);\n\n  const getStrSongProgress = () => {\n    return String(songProgress);\n  };\n\n  const getFormattedProgressTime = () => {\n    const formattedProgress = formatTime(songDuration, songProgress);\n    return formattedProgress;\n  };\n\n  const getFormattedRemainingTime = () => {\n    const fractionSongRemaining = 1 - songProgress;\n    const formattedTimeLeft = formatTime(songDuration, fractionSongRemaining);\n    return formattedTimeLeft;\n  };\n\n  const getProgressBarBackgrClassName = () => {\n    const isSomeTrackLoaded = songDuration !== 0;\n    const cursorShouldBePointer = isSomeTrackLoaded && !isDragging;\n    const possibleClickableClass = cursorShouldBePointer ? 'progress-clickable' : '';\n    const defaultClasses = 'progress progress-style';\n    return `${defaultClasses} ${possibleClickableClass}`;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spread-bar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-format\",\n      children: getFormattedProgressTime()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"progress-bar-background\",\n      className: getProgressBarBackgrClassName(),\n      onMouseDown: handleMouseDown,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"progress-bar\",\n        className: \"progress-bar progress-bar-style\",\n        \"aria-valuenow\": getStrSongProgress(),\n        \"aria-valuemin\": \"0\",\n        \"aria-valuemax\": \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-format\",\n      children: getFormattedRemainingTime()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProgressBar, \"oX95R3M2epy8/SsEd57utGlNzyc=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = ProgressBar;\nexport default ProgressBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProgressBar\");","map":{"version":3,"names":["useState","useEffect","useCallback","getPlayerAudio","setPlayerAudioCurrentTime","formatTime","useDispatch","useSelector","toggleIsPlaying","refreshTimePeriod","tinyFraction","ProgressBar","songDuration","setSongDuration","songProgress","setSongProgress","isDragging","setIsDragging","didPlayingChange","setDidPlayingChange","isPlaying","state","playerConfig","dispatch","updateSongProgress","playerAudio","currentSongTime","currentTime","newSongDuration","duration","isSomeTrackLoaded","isNaN","newSongProgress","getProgressBar","document","getElementById","getProgressBarBackground","getFractionIntoProgressBar","pixelsIn","barWidth","getProgressBackgroundRect","progressBackground","backgroundRect","getBoundingClientRect","getClientRectWidth","rect","width","right","left","getPixelsIntoRect","MouseEvent","clientX","setSongPosition","progBackgrRect","progBackgrWidth","pixelsIntoProgrBackgr","fractionIntoProgressBar","newTime","handleMouseDown","e","preventDefault","toggleTextSelect","classList","toggle","handleMouseUp","handleMouseMove","updateMouseEventListeners","addEventListener","removeEventListener","refreshBarInterval","setInterval","clearInterval","updateProgressBarWidth","progressBar","songProgressPercentage","songProgressPercentageStr","String","style","getStrSongProgress","getFormattedProgressTime","formattedProgress","getFormattedRemainingTime","fractionSongRemaining","formattedTimeLeft","getProgressBarBackgrClassName","cursorShouldBePointer","possibleClickableClass","defaultClasses"],"sources":["C:/Users/adamg/Documents/temp/sky/Sky-Music-Project/my-app/src/components/ProgressBar/ProgressBar.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { getPlayerAudio, setPlayerAudioCurrentTime } from '../Player/Player';\r\nimport { formatTime } from '../../utility/format/formatBarTime';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { toggleIsPlaying } from '../../state/slices/playerConfig/playerConfigSlice';\r\n\r\nimport './ProgressBar.css';\r\n\r\n\r\n// refreshTimePeriod in milliseconds.\r\nconst refreshTimePeriod = 10;\r\nconst tinyFraction = 0.0001;\r\n\r\nconst ProgressBar = () => {\r\n    //songDuration is length in seconds.\r\n    //songProgress is fraction of way through song.\r\n    const [songDuration, setSongDuration] = useState(0);\r\n    const [songProgress, setSongProgress] = useState(0);\r\n    const [isDragging, setIsDragging] = useState(false);\r\n    const [didPlayingChange, setDidPlayingChange] = useState(false);\r\n\r\n    const isPlaying = useSelector((state) => state.playerConfig.isPlaying);\r\n    const dispatch = useDispatch();\r\n\r\n    const updateSongProgress = () => {\r\n        const playerAudio = getPlayerAudio();\r\n        const currentSongTime = playerAudio.currentTime;\r\n        const newSongDuration = playerAudio.duration;\r\n        const isSomeTrackLoaded = !isNaN(newSongDuration);\r\n\r\n        if (isSomeTrackLoaded) {\r\n            const newSongProgress = currentSongTime / newSongDuration;\r\n            setSongDuration(newSongDuration);\r\n            setSongProgress(newSongProgress);\r\n        }\r\n    };\r\n\r\n    const getProgressBar = () => {\r\n        return document.getElementById('progress-bar');\r\n    };\r\n\r\n    const getProgressBarBackground = () => {\r\n        return document.getElementById('progress-bar-background');\r\n    };\r\n\r\n    const getFractionIntoProgressBar = (pixelsIn, barWidth) => {\r\n        if (pixelsIn < 0) {\r\n            return 0;\r\n        } else if (pixelsIn > barWidth) {\r\n            return 1 - tinyFraction;\r\n        } else {\r\n            return pixelsIn / barWidth;\r\n        }\r\n    };\r\n\r\n    const getProgressBackgroundRect = () => {\r\n        const progressBackground = getProgressBarBackground();\r\n        const backgroundRect = progressBackground.getBoundingClientRect();\r\n        return backgroundRect;\r\n    };\r\n\r\n    const getClientRectWidth = (rect) => {\r\n        const width = rect.right - rect.left;\r\n        return width;\r\n    };\r\n\r\n    const getPixelsIntoRect = (MouseEvent, rect) => {\r\n        return MouseEvent.clientX - rect.left;\r\n    }\r\n\r\n    const setSongPosition = (MouseEvent) => {\r\n        //get position of mouse\r\n        const progBackgrRect = getProgressBackgroundRect();\r\n        const progBackgrWidth = getClientRectWidth(progBackgrRect); \r\n        \r\n        const pixelsIntoProgrBackgr = getPixelsIntoRect(MouseEvent, progBackgrRect);\r\n        const fractionIntoProgressBar = getFractionIntoProgressBar(pixelsIntoProgrBackgr, \r\n                                                                   progBackgrWidth);\r\n        \r\n        const isSomeTrackLoaded = songDuration !== 0;\r\n        if (isSomeTrackLoaded) {\r\n            const newTime = fractionIntoProgressBar * songDuration;\r\n            setPlayerAudioCurrentTime(newTime);\r\n        }\r\n    };\r\n\r\n    const handleMouseDown = (e) => {\r\n        e.preventDefault();\r\n        setSongPosition(e);\r\n        setIsDragging(true);\r\n        toggleTextSelect();\r\n        if (isPlaying) {\r\n            setDidPlayingChange(true);\r\n            dispatch(toggleIsPlaying());\r\n        }\r\n    };\r\n\r\n    const toggleTextSelect = () => {\r\n        document\r\n        .getElementById('root')\r\n        .classList\r\n        .toggle('dragging-progress-bar');\r\n    };\r\n\r\n    const handleMouseUp = useCallback((e) => {\r\n        setIsDragging(false);\r\n        toggleTextSelect();\r\n        if (didPlayingChange) {\r\n            setDidPlayingChange(false);\r\n            dispatch(toggleIsPlaying());\r\n        }\r\n    }, [didPlayingChange]);\r\n\r\n    const handleMouseMove = useCallback((e) => {\r\n        if (isDragging) {\r\n            setSongPosition(e);\r\n        }\r\n    }, [isDragging, songDuration]);\r\n\r\n    useEffect(() => {\r\n        const updateMouseEventListeners = () => {\r\n            if (isDragging) {\r\n                document.addEventListener('mousemove', handleMouseMove);\r\n                document.addEventListener('mouseup', handleMouseUp);\r\n            }\r\n            return () => {\r\n                document.removeEventListener('mousemove', handleMouseMove);\r\n                document.removeEventListener('mouseup', handleMouseUp);\r\n            };\r\n        };\r\n        \r\n        return updateMouseEventListeners();\r\n    }, [isDragging]);\r\n\r\n    useEffect(() => {\r\n        const refreshBarInterval = setInterval(() => {\r\n            updateSongProgress();\r\n        }, refreshTimePeriod);\r\n\r\n        return () => clearInterval(refreshBarInterval);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const updateProgressBarWidth = () => {\r\n            const progressBar = getProgressBar();\r\n            const songProgressPercentage = songProgress * 100;\r\n            const songProgressPercentageStr = String(songProgressPercentage) + '%';\r\n            progressBar.style.width = songProgressPercentageStr;\r\n        };\r\n        updateProgressBarWidth();\r\n    }, [songProgress]);\r\n\r\n    const getStrSongProgress = () => {\r\n        return String(songProgress);\r\n    };\r\n\r\n    const getFormattedProgressTime = () => {\r\n        const formattedProgress = formatTime(songDuration, songProgress);\r\n        return formattedProgress;\r\n    };\r\n\r\n    const getFormattedRemainingTime = () => {\r\n        const fractionSongRemaining = 1 - songProgress;\r\n        const formattedTimeLeft = formatTime(songDuration, fractionSongRemaining);\r\n        return formattedTimeLeft;\r\n    };\r\n\r\n    const getProgressBarBackgrClassName = () => {\r\n        const isSomeTrackLoaded = songDuration !== 0;\r\n        const cursorShouldBePointer = isSomeTrackLoaded && !isDragging;\r\n        const possibleClickableClass = cursorShouldBePointer ? 'progress-clickable'\r\n                                                             : '';\r\n        const defaultClasses = 'progress progress-style';\r\n        return `${defaultClasses} ${possibleClickableClass}`;\r\n    };\r\n\r\n    return (\r\n        <div className='spread-bar'>\r\n            <div className='time-format'>{getFormattedProgressTime()}</div>\r\n            <div id='progress-bar-background' className={getProgressBarBackgrClassName()} onMouseDown={handleMouseDown}>\r\n                <div id='progress-bar' className='progress-bar progress-bar-style' aria-valuenow={getStrSongProgress()} aria-valuemin='0' aria-valuemax='100'></div>\r\n            </div>\r\n            <div className='time-format'>{getFormattedRemainingTime()}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProgressBar;"],"mappings":"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"},"metadata":{},"sourceType":"module"}