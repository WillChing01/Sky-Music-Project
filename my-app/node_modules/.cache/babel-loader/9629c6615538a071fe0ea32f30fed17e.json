{"ast":null,"code":"const mod = (n, m) => {\n  return (n % m + m) % m;\n};\n\nconst createHistory = function () {\n  let limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n  const length = limit + 1;\n  const tracks = new Array(length);\n  tracks.fill({});\n  Object.seal(tracks);\n  const current = 0;\n  const top = 0;\n  tracks[top] = null;\n  return {\n    length,\n    tracks,\n    current,\n    top\n  };\n}; // formerly get\n\n\nexport const getHistory = history => {\n  const nothingLeft = history.tracks[history.current] === null;\n  if (nothingLeft) return null;\n  const track = history.tracks[history.current];\n  history.current = mod(history.current - 1, history.length);\n  return track;\n}; // formerly push\n\nexport const pushHistory = (history, track) => {\n  const newTop = mod(history.top + 1, history.length);\n  const isFull = history.tracks[newTop] === null;\n\n  if (isFull) {\n    const newEnd = mod(newTop + 1, history.length);\n    history.tracks[newEnd] = null;\n  }\n\n  history.top = newTop;\n  history.tracks[history.top] = track;\n}; // --------------------------------------------------------------------------------------------\n\nconst getRandomIndex = bound => {\n  return Math.floor(Math.random() * bound);\n};\n\nlet id = 0;\n\nconst generateNewId = () => {\n  return id++;\n};\n\nconst defaultTrack = {\n  currentPreviewURL: '',\n  name: '',\n  artistName: '',\n  imgSrc: ''\n};\nexport const createPlaylist = function () {\n  let tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [defaultTrack];\n  const id = generateNewId();\n  const masterTracks = tracks;\n  const progressIndex = 0;\n  const currentIndex = progressIndex;\n  const history = createHistory();\n  return {\n    id,\n    masterTracks,\n    tracks,\n    progressIndex,\n    currentIndex,\n    history\n  };\n}; // formerly shuffle\n\nexport const shufflePlaylist = playlist => {\n  const tracks = playlist.tracks;\n  const length = tracks.length;\n\n  for (let i = length - 2; i >= 0; i--) {\n    const j = getRandomIndex(length - 1);\n    [tracks[i], tracks[j]] = [tracks[j], tracks[i]];\n  }\n\n  const randIndex = getRandomIndex(length);\n  const lastItemIndex = Math.min(randIndex + 1, length - 1);\n  [tracks[randIndex], tracks[lastItemIndex]] = [tracks[lastItemIndex], tracks[randIndex]];\n}; // formerly unshuffle\n\nexport const unshufflePlaylist = playlist => {\n  playlist.tracks = playlist.masterTracks;\n}; // formerly getCurrentTrack\n\nexport const getPlaylistTrack = playlist => {\n  return playlist.tracks[playlist.currentIndex];\n}; // formerly setTrack\n\nexport const setPlaylistTrack = (playlist, track, isShuffle) => {\n  const trackIndex = getPlaylistTrackIndex(playlist, track);\n\n  if (isShuffle) {\n    playlist.currentIndex = trackIndex;\n  } else {\n    playlist.progressIndex = trackIndex;\n    playlist.currentIndex = playlist.progressIndex;\n  }\n}; // formerly setNextTrack\n\nexport const setPlaylistNextTrack = (playlist, isShuffle) => {\n  const lastIndex = playlist.masterTracks.length - 1;\n  const isAtLastTrack = playlist.progressIndex === lastIndex;\n  const currentTrack = getPlaylistTrack(playlist);\n  pushHistory(playlist.history, currentTrack);\n  playlist.history.current = playlist.history.top;\n\n  if (isAtLastTrack) {\n    playlist.progressIndex = 0;\n    playlist.currentIndex = 0;\n\n    if (isShuffle) {\n      shufflePlaylist(playlist);\n    }\n  } else {\n    playlist.progressIndex++;\n    playlist.currentIndex = playlist.progressIndex;\n  }\n}; // formerly setPreviousTrack\n\nexport const setPlaylistPreviousTrack = playlist => {\n  console.log(playlist.history);\n  const previousTrack = getHistory(playlist.history);\n  if (previousTrack === null) return;\n  const currentTrack = getPlaylistTrack(playlist);\n  pushHistory(playlist.history, currentTrack);\n  const previousTrackIndex = getPlaylistTrackIndex(playlist, previousTrack);\n  playlist.currentIndex = previousTrackIndex;\n}; // formerly getTrackIndex\n\nexport const getPlaylistTrackIndex = (playlist, track) => {\n  for (const [index, info] of playlist.tracks.entries()) {\n    const isCurrentTrack = info.currentPreviewURL === track.currentPreviewURL;\n\n    if (isCurrentTrack) {\n      return index;\n    }\n  }\n\n  return -1;\n}; // tracks:\n// a, b, c, d, e\n//          ^\n// history:\n// a, b, c\n// tracks:\n// a, b, c, d, e\n//       ^   \n// history:\n// a, b, c, d\n// tracks:\n// a, b, c, d, e\n//    ^     \n// history:\n// a, b, c, d, c\n// tracks:\n// a, b, c, d, e\n//             ^     \n// history:\n// a, b, c, d, c, b","map":{"version":3,"names":["mod","n","m","createHistory","limit","length","tracks","Array","fill","Object","seal","current","top","getHistory","history","nothingLeft","track","pushHistory","newTop","isFull","newEnd","getRandomIndex","bound","Math","floor","random","id","generateNewId","defaultTrack","currentPreviewURL","name","artistName","imgSrc","createPlaylist","masterTracks","progressIndex","currentIndex","shufflePlaylist","playlist","i","j","randIndex","lastItemIndex","min","unshufflePlaylist","getPlaylistTrack","setPlaylistTrack","isShuffle","trackIndex","getPlaylistTrackIndex","setPlaylistNextTrack","lastIndex","isAtLastTrack","currentTrack","setPlaylistPreviousTrack","console","log","previousTrack","previousTrackIndex","index","info","entries","isCurrentTrack"],"sources":["C:/Users/adamg/Documents/temp/sky/Sky-Music-Project/my-app/src/state/slices/playablePlaylist/playlistMutators.js"],"sourcesContent":["const mod = (n, m) => {\r\n    return ((n % m) + m) % m;\r\n};\r\n\r\nconst createHistory = (limit = 50) => {\r\n    const length = limit + 1;\r\n    const tracks = new Array(length);\r\n    tracks.fill({});\r\n    Object.seal(tracks);\r\n    const current = 0;\r\n    const top = 0;\r\n    tracks[top] = null\r\n\r\n    return {\r\n        length,\r\n        tracks,\r\n        current,\r\n        top\r\n    }\r\n};\r\n\r\n// formerly get\r\nexport const getHistory = (history) => {\r\n    const nothingLeft = history.tracks[history.current] === null;\r\n    if (nothingLeft) return null;\r\n    const track = history.tracks[history.current];\r\n    history.current = mod(history.current - 1, history.length);\r\n    return track;\r\n};\r\n\r\n// formerly push\r\nexport const pushHistory = (history, track) => {\r\n    const newTop = mod(history.top + 1, history.length);\r\n    const isFull = history.tracks[newTop] === null;\r\n    if (isFull) {\r\n        const newEnd = mod(newTop + 1, history.length);\r\n        history.tracks[newEnd] = null;\r\n    }\r\n    history.top = newTop;\r\n    history.tracks[history.top] = track;\r\n};\r\n\r\n\r\n// --------------------------------------------------------------------------------------------\r\n\r\n\r\nconst getRandomIndex = (bound) => {\r\n    return Math.floor(Math.random() * bound);\r\n}\r\n\r\nlet id = 0;\r\nconst generateNewId = () => {\r\n    return id++;\r\n}\r\n\r\nconst defaultTrack = {\r\n    currentPreviewURL: '',\r\n    name: '',\r\n    artistName: '',\r\n    imgSrc: ''\r\n}\r\n\r\nexport const createPlaylist = (tracks = [defaultTrack]) => {\r\n    const id = generateNewId();\r\n    const masterTracks = tracks;\r\n    const progressIndex = 0;\r\n    const currentIndex = progressIndex;\r\n    const history = createHistory();\r\n    return {\r\n        id,\r\n        masterTracks,\r\n        tracks,\r\n        progressIndex,\r\n        currentIndex,\r\n        history \r\n    }\r\n};\r\n\r\n// formerly shuffle\r\nexport const shufflePlaylist = (playlist) => {\r\n    const tracks = playlist.tracks;\r\n    const length = tracks.length;\r\n\r\n    for (let i = length - 2; i >= 0; i--) {\r\n        const j = getRandomIndex(length - 1);\r\n        [tracks[i], tracks[j]] = [tracks[j], tracks[i]];\r\n    }\r\n\r\n    const randIndex = getRandomIndex(length);\r\n    const lastItemIndex = Math.min(randIndex + 1, length - 1);\r\n    [tracks[randIndex], tracks[lastItemIndex]] = [tracks[lastItemIndex], tracks[randIndex]];\r\n};\r\n\r\n// formerly unshuffle\r\nexport const unshufflePlaylist = (playlist) => {\r\n    playlist.tracks = playlist.masterTracks;\r\n};\r\n\r\n// formerly getCurrentTrack\r\nexport const getPlaylistTrack = (playlist) => {\r\n    return playlist.tracks[playlist.currentIndex];\r\n};\r\n\r\n// formerly setTrack\r\nexport const setPlaylistTrack = (playlist, track, isShuffle) => {\r\n    const trackIndex = getPlaylistTrackIndex(playlist, track);\r\n    if (isShuffle) {\r\n        playlist.currentIndex = trackIndex;\r\n    } else {\r\n        playlist.progressIndex = trackIndex;\r\n        playlist.currentIndex = playlist.progressIndex;\r\n    }\r\n};\r\n\r\n// formerly setNextTrack\r\nexport const setPlaylistNextTrack = (playlist, isShuffle) => {\r\n    const lastIndex = playlist.masterTracks.length - 1;\r\n    const isAtLastTrack = playlist.progressIndex === lastIndex;\r\n\r\n    const currentTrack = getPlaylistTrack(playlist);\r\n    pushHistory(playlist.history, currentTrack);\r\n    playlist.history.current = playlist.history.top\r\n    \r\n    if (isAtLastTrack) {\r\n        playlist.progressIndex = 0;\r\n        playlist.currentIndex = 0;\r\n        if (isShuffle) {\r\n            shufflePlaylist(playlist);\r\n        }\r\n    } else {\r\n        playlist.progressIndex++;\r\n        playlist.currentIndex = playlist.progressIndex;\r\n    }\r\n};\r\n\r\n// formerly setPreviousTrack\r\nexport const setPlaylistPreviousTrack = (playlist) => {\r\n    console.log(playlist.history)\r\n    const previousTrack = getHistory(playlist.history);\r\n    if (previousTrack === null) return;\r\n    const currentTrack = getPlaylistTrack(playlist);\r\n    pushHistory(playlist.history, currentTrack);\r\n    \r\n    const previousTrackIndex = getPlaylistTrackIndex(playlist, previousTrack);\r\n    playlist.currentIndex = previousTrackIndex;\r\n}\r\n\r\n// formerly getTrackIndex\r\nexport const getPlaylistTrackIndex = (playlist, track) => {\r\n    for (const [index, info] of playlist.tracks.entries()) {\r\n        const isCurrentTrack = info.currentPreviewURL === track.currentPreviewURL;\r\n        if (isCurrentTrack) {\r\n            return index;\r\n        }\r\n    }\r\n    return -1;\r\n};\r\n\r\n// tracks:\r\n// a, b, c, d, e\r\n//          ^\r\n// history:\r\n// a, b, c\r\n\r\n// tracks:\r\n// a, b, c, d, e\r\n//       ^   \r\n// history:\r\n// a, b, c, d\r\n\r\n// tracks:\r\n// a, b, c, d, e\r\n//    ^     \r\n// history:\r\n// a, b, c, d, c\r\n\r\n// tracks:\r\n// a, b, c, d, e\r\n//             ^     \r\n// history:\r\n// a, b, c, d, c, b"],"mappings":"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"},"metadata":{},"sourceType":"module"}