{"ast":null,"code":"import { createPlaylist, shufflePlaylist, unshufflePlaylist, setPlaylistTrack, setPlaylistNextTrack, setPlaylistPreviousTrack } from './playlistMutators'; // Reducers:\n\n/**\r\n * When tracks load\r\n */\n\nconst pushPlaylist = (state, _ref) => {\n  let {\n    payload\n  } = _ref;\n  const newPlaylist = createPlaylist(payload);\n  state.playlistStack.push(newPlaylist);\n};\n/**\r\n * When playlist is no longer in scope\r\n */\n\n\nconst popPlaylist = state => {\n  state.playlistStack.pop();\n};\n/**\r\n * When play icon is clicked\r\n */\n\n\nconst setTrack = (state, _ref2) => {\n  let {\n    payload\n  } = _ref2;\n  const topPlaylist = state.playlistStack.at(-1);\n  const currentPlaylist = state.currentPlaylist;\n  const shouldUpdate = topPlaylist.id !== currentPlaylist.id;\n\n  if (shouldUpdate) {\n    const isShuffle = state.isShuffle;\n    if (isShuffle) shufflePlaylist(topPlaylist);\n    setPlaylistTrack(topPlaylist, payload, isShuffle);\n    state.currentPlaylist = topPlaylist;\n  } else {\n    setPlaylistTrack(currentPlaylist, payload, state.isShuffle);\n  }\n};\n/**\r\n * End of a song or when next track is clicked\r\n */\n\n\nconst nextTrack = state => {\n  setPlaylistNextTrack(state.currentPlaylist, state.isShuffle);\n};\n/**\r\n * When previous track is clicked\r\n */\n\n\nconst previousTrack = state => {\n  setPlaylistPreviousTrack(state.currentPlaylist);\n};\n/**\r\n * When shuffle is turned on\r\n */\n\n\nconst shuffle = state => {\n  shufflePlaylist(state.currentPlaylist);\n  state.isShuffle = true;\n};\n/**\r\n * When shuffle is turned off\r\n */\n\n\nconst unshuffle = state => {\n  unshufflePlaylist(state.currentPlaylist);\n  state.isShuffle = false;\n};\n\nconst reducers = {\n  pushPlaylist,\n  popPlaylist,\n  setTrack,\n  nextTrack,\n  previousTrack,\n  shuffle,\n  unshuffle\n};\nexport default reducers;","map":{"version":3,"names":["createPlaylist","shufflePlaylist","unshufflePlaylist","setPlaylistTrack","setPlaylistNextTrack","setPlaylistPreviousTrack","pushPlaylist","state","payload","newPlaylist","playlistStack","push","popPlaylist","pop","setTrack","topPlaylist","at","currentPlaylist","shouldUpdate","id","isShuffle","nextTrack","previousTrack","shuffle","unshuffle","reducers"],"sources":["C:/Users/adamg/Documents/temp/sky/Sky-Music-Project/my-app/src/state/slices/playablePlaylist/playablePlaylistReducers.js"],"sourcesContent":["import { \r\n    createPlaylist,\r\n    shufflePlaylist,\r\n    unshufflePlaylist,\r\n    setPlaylistTrack,\r\n    setPlaylistNextTrack,\r\n    setPlaylistPreviousTrack,\r\n} from './playlistMutators';\r\n\r\n// Reducers:\r\n\r\n/**\r\n * When tracks load\r\n */\r\nconst pushPlaylist = (state, { payload }) => {\r\n    const newPlaylist = createPlaylist(payload);\r\n    state.playlistStack.push(newPlaylist);\r\n};\r\n\r\n/**\r\n * When playlist is no longer in scope\r\n */\r\nconst popPlaylist = (state) => {\r\n    state.playlistStack.pop();\r\n};\r\n\r\n/**\r\n * When play icon is clicked\r\n */\r\nconst setTrack = (state, { payload }) => {\r\n    const topPlaylist = state.playlistStack.at(-1);\r\n    const currentPlaylist = state.currentPlaylist; \r\n    const shouldUpdate = topPlaylist.id !== currentPlaylist.id;\r\n    \r\n    if (shouldUpdate) {\r\n        const isShuffle = state.isShuffle;\r\n\r\n        if (isShuffle) shufflePlaylist(topPlaylist);\r\n        setPlaylistTrack(topPlaylist, payload, isShuffle);\r\n        state.currentPlaylist = topPlaylist;\r\n    } else {\r\n        setPlaylistTrack(currentPlaylist, payload, state.isShuffle);\r\n    }\r\n};\r\n\r\n/**\r\n * End of a song or when next track is clicked\r\n */\r\nconst nextTrack = (state) => {\r\n    setPlaylistNextTrack(state.currentPlaylist, state.isShuffle);\r\n}\r\n\r\n/**\r\n * When previous track is clicked\r\n */\r\nconst previousTrack = (state) => {\r\n    setPlaylistPreviousTrack(state.currentPlaylist)\r\n}\r\n\r\n/**\r\n * When shuffle is turned on\r\n */\r\n const shuffle = (state) => {\r\n    shufflePlaylist(state.currentPlaylist);\r\n    state.isShuffle = true;\r\n}\r\n\r\n/**\r\n * When shuffle is turned off\r\n */\r\n const unshuffle = (state) => {\r\n    unshufflePlaylist(state.currentPlaylist);\r\n    state.isShuffle = false;\r\n}\r\n\r\nconst reducers = {\r\n    pushPlaylist,\r\n    popPlaylist,\r\n    setTrack,\r\n    nextTrack,\r\n    previousTrack,\r\n    shuffle,\r\n    unshuffle\r\n};\r\n\r\nexport default reducers;\r\n\r\n"],"mappings":"AAAA,SACIA,cADJ,EAEIC,eAFJ,EAGIC,iBAHJ,EAIIC,gBAJJ,EAKIC,oBALJ,EAMIC,wBANJ,QAOO,oBAPP,C,CASA;;AAEA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG,CAACC,KAAD,WAAwB;EAAA,IAAhB;IAAEC;EAAF,CAAgB;EACzC,MAAMC,WAAW,GAAGT,cAAc,CAACQ,OAAD,CAAlC;EACAD,KAAK,CAACG,aAAN,CAAoBC,IAApB,CAAyBF,WAAzB;AACH,CAHD;AAKA;AACA;AACA;;;AACA,MAAMG,WAAW,GAAIL,KAAD,IAAW;EAC3BA,KAAK,CAACG,aAAN,CAAoBG,GAApB;AACH,CAFD;AAIA;AACA;AACA;;;AACA,MAAMC,QAAQ,GAAG,CAACP,KAAD,YAAwB;EAAA,IAAhB;IAAEC;EAAF,CAAgB;EACrC,MAAMO,WAAW,GAAGR,KAAK,CAACG,aAAN,CAAoBM,EAApB,CAAuB,CAAC,CAAxB,CAApB;EACA,MAAMC,eAAe,GAAGV,KAAK,CAACU,eAA9B;EACA,MAAMC,YAAY,GAAGH,WAAW,CAACI,EAAZ,KAAmBF,eAAe,CAACE,EAAxD;;EAEA,IAAID,YAAJ,EAAkB;IACd,MAAME,SAAS,GAAGb,KAAK,CAACa,SAAxB;IAEA,IAAIA,SAAJ,EAAenB,eAAe,CAACc,WAAD,CAAf;IACfZ,gBAAgB,CAACY,WAAD,EAAcP,OAAd,EAAuBY,SAAvB,CAAhB;IACAb,KAAK,CAACU,eAAN,GAAwBF,WAAxB;EACH,CAND,MAMO;IACHZ,gBAAgB,CAACc,eAAD,EAAkBT,OAAlB,EAA2BD,KAAK,CAACa,SAAjC,CAAhB;EACH;AACJ,CAdD;AAgBA;AACA;AACA;;;AACA,MAAMC,SAAS,GAAId,KAAD,IAAW;EACzBH,oBAAoB,CAACG,KAAK,CAACU,eAAP,EAAwBV,KAAK,CAACa,SAA9B,CAApB;AACH,CAFD;AAIA;AACA;AACA;;;AACA,MAAME,aAAa,GAAIf,KAAD,IAAW;EAC7BF,wBAAwB,CAACE,KAAK,CAACU,eAAP,CAAxB;AACH,CAFD;AAIA;AACA;AACA;;;AACC,MAAMM,OAAO,GAAIhB,KAAD,IAAW;EACxBN,eAAe,CAACM,KAAK,CAACU,eAAP,CAAf;EACAV,KAAK,CAACa,SAAN,GAAkB,IAAlB;AACH,CAHA;AAKD;AACA;AACA;;;AACC,MAAMI,SAAS,GAAIjB,KAAD,IAAW;EAC1BL,iBAAiB,CAACK,KAAK,CAACU,eAAP,CAAjB;EACAV,KAAK,CAACa,SAAN,GAAkB,KAAlB;AACH,CAHA;;AAKD,MAAMK,QAAQ,GAAG;EACbnB,YADa;EAEbM,WAFa;EAGbE,QAHa;EAIbO,SAJa;EAKbC,aALa;EAMbC,OANa;EAObC;AAPa,CAAjB;AAUA,eAAeC,QAAf"},"metadata":{},"sourceType":"module"}