{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adamg\\\\Documents\\\\temp\\\\sky\\\\Sky-Music-Project\\\\my-app\\\\src\\\\components\\\\VolumeControl\\\\VolumeControl.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useKeyPress from '../../hooks/useKeyPress';\nimport { setCurrentVolume, toggleIsMuted } from '../../state/slices/playerConfig/playerConfigSlice';\nimport { setPlayerAudioVolume } from '../Player/Player';\nimport './VolumeControl.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst volumeIncrement = 0.05;\n\nconst VolumeControl = () => {\n  _s();\n\n  const {\n    currentVolume,\n    cachedVolume,\n    isMuted\n  } = useSelector(state => state.playerConfig);\n  const dispatch = useDispatch();\n\n  const handleClickVolumeIcon = () => {\n    if (isMuted) {\n      dispatch(setCurrentVolume(cachedVolume));\n      setPlayerAudioVolume(cachedVolume);\n    } else {\n      dispatch(setCurrentVolume(0));\n      setPlayerAudioVolume(0);\n    }\n\n    dispatch(toggleIsMuted());\n  };\n\n  const handleUnmuteOnVolumeChange = newVolume => {\n    const shouldUnmute = isMuted && newVolume !== 0;\n    if (shouldUnmute) dispatch(toggleIsMuted());\n  };\n\n  const handleVolumeSliderChange = e => {\n    const newVolume = parseFloat(e.target.value) / 100;\n    setPlayerAudioVolume(newVolume);\n    dispatch(setCurrentVolume(newVolume));\n    handleUnmuteOnVolumeChange(newVolume);\n  };\n\n  const jumpVolume = direction => {\n    let newVolume = currentVolume;\n\n    switch (direction) {\n      case 'up':\n        newVolume = Math.min(newVolume + volumeIncrement, 1);\n        break;\n\n      case 'down':\n        newVolume = Math.max(newVolume - volumeIncrement, 0);\n        break;\n\n      default:\n        break;\n    }\n\n    setPlayerAudioVolume(newVolume);\n    dispatch(setCurrentVolume(newVolume));\n  };\n\n  const handleVolumeKeyPress = e => {\n    if (document.activeElement.type !== 'search') {\n      const key = e.key.toLowerCase();\n\n      switch (key) {\n        case 'm':\n          handleClickVolumeIcon();\n          break;\n\n        case ']':\n          jumpVolume('up');\n          break;\n\n        case '[':\n          jumpVolume('down');\n          break;\n\n        default:\n          break;\n      }\n    }\n  };\n\n  const setInitialPlayerAudioVolume = () => {\n    setPlayerAudioVolume(currentVolume);\n  };\n\n  useEffect(() => {\n    setInitialPlayerAudioVolume();\n  }, [currentVolume]);\n  useKeyPress(handleVolumeKeyPress, [currentVolume, cachedVolume, isMuted]);\n\n  const getVolumeIconClass = () => {\n    const volumeIconClass = currentVolume === 0 ? 'bi bi-volume-mute icon' : 'bi bi-volume-up icon';\n    return volumeIconClass;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"i\", {\n      className: getVolumeIconClass(),\n      onClick: handleClickVolumeIcon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: \"0\",\n      max: \"100\",\n      value: currentVolume * 100,\n      onChange: handleVolumeSliderChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(VolumeControl, \"Hlkhzo+aRfGwz7HLnjSJmUaYtcM=\", false, function () {\n  return [useSelector, useDispatch, useKeyPress];\n});\n\n_c = VolumeControl;\nexport default VolumeControl;\n\nvar _c;\n\n$RefreshReg$(_c, \"VolumeControl\");","map":{"version":3,"names":["useEffect","useDispatch","useSelector","useKeyPress","setCurrentVolume","toggleIsMuted","setPlayerAudioVolume","volumeIncrement","VolumeControl","currentVolume","cachedVolume","isMuted","state","playerConfig","dispatch","handleClickVolumeIcon","handleUnmuteOnVolumeChange","newVolume","shouldUnmute","handleVolumeSliderChange","e","parseFloat","target","value","jumpVolume","direction","Math","min","max","handleVolumeKeyPress","document","activeElement","type","key","toLowerCase","setInitialPlayerAudioVolume","getVolumeIconClass","volumeIconClass"],"sources":["C:/Users/adamg/Documents/temp/sky/Sky-Music-Project/my-app/src/components/VolumeControl/VolumeControl.js"],"sourcesContent":["import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport useKeyPress from '../../hooks/useKeyPress';\r\nimport { setCurrentVolume, toggleIsMuted } from '../../state/slices/playerConfig/playerConfigSlice';\r\nimport { setPlayerAudioVolume } from '../Player/Player';\r\n\r\nimport './VolumeControl.css';\r\n\r\n\r\nconst volumeIncrement = 0.05;\r\n\r\n\r\nconst VolumeControl = () => {\r\n    const {currentVolume, cachedVolume, isMuted } = useSelector((state) => state.playerConfig);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClickVolumeIcon = () => {\r\n        if (isMuted) {\r\n            dispatch(setCurrentVolume(cachedVolume));\r\n            setPlayerAudioVolume(cachedVolume);\r\n        } else {\r\n            dispatch(setCurrentVolume(0));\r\n            setPlayerAudioVolume(0);\r\n        }\r\n        dispatch(toggleIsMuted());\r\n    }\r\n\r\n    const handleUnmuteOnVolumeChange = (newVolume) => {\r\n        const shouldUnmute = isMuted && newVolume !== 0;\r\n        if (shouldUnmute) dispatch(toggleIsMuted());\r\n    };\r\n\r\n    const handleVolumeSliderChange = (e) => {\r\n        const newVolume = parseFloat(e.target.value)/100;\r\n        setPlayerAudioVolume(newVolume);\r\n        dispatch(setCurrentVolume(newVolume));\r\n        handleUnmuteOnVolumeChange(newVolume);\r\n    };\r\n\r\n    const jumpVolume = (direction) => {\r\n        let newVolume = currentVolume;\r\n        switch (direction) {\r\n            case 'up':\r\n                newVolume = Math.min(newVolume + volumeIncrement, 1);\r\n                break;\r\n            case 'down':\r\n                newVolume = Math.max(newVolume - volumeIncrement, 0);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        setPlayerAudioVolume(newVolume);\r\n        dispatch(setCurrentVolume(newVolume));\r\n    };\r\n\r\n\r\n    const handleVolumeKeyPress = (e) => {\r\n        if (document.activeElement.type !== 'search') {\r\n            const key = e.key.toLowerCase();\r\n            switch (key) {\r\n                case 'm':\r\n                    handleClickVolumeIcon();\r\n                    break;\r\n                case ']':\r\n                    jumpVolume('up');\r\n                    break;\r\n                case '[':\r\n                    jumpVolume('down');\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n    \r\n    const setInitialPlayerAudioVolume = () => {\r\n        setPlayerAudioVolume(currentVolume);\r\n    };\r\n    \r\n    useEffect(() => {\r\n        setInitialPlayerAudioVolume();\r\n    }, [currentVolume]);\r\n    \r\n\r\n    useKeyPress(handleVolumeKeyPress, [\r\n        currentVolume,\r\n        cachedVolume,\r\n        isMuted\r\n    ]);\r\n    \r\n    const getVolumeIconClass = () => {\r\n        const volumeIconClass = currentVolume === 0 ? 'bi bi-volume-mute icon'\r\n                                                    : 'bi bi-volume-up icon';\r\n        return volumeIconClass;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <i className={getVolumeIconClass()} onClick={handleClickVolumeIcon}></i> \r\n            <input type='range' min='0' max='100' value={currentVolume*100} onChange={handleVolumeSliderChange}/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default VolumeControl;"],"mappings":"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"},"metadata":{},"sourceType":"module"}