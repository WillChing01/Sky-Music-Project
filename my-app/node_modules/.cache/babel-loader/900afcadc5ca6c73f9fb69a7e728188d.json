{"ast":null,"code":"export const formatTime = (songDuration, songFraction) => {\n  const [hours, minutes, seconds] = getTimeValues(songDuration, songFraction);\n  const isLong = getIsLong(songDuration);\n  const formattedFraction = padTime(hours, minutes, seconds, isLong);\n  return formattedFraction; // if ((isNaN(hours) || isNaN(minutes)) || isNaN(seconds)) {\n  //     const defaultTime = padTime(0, 0, 0);\n  //     return defaultTime;\n  // } else {\n  //     const formattedFraction = padTime(hours, minutes, seconds);\n  //     return formattedFraction;\n  // }\n};\n\nconst getIsLong = songDuration => {\n  const wholeHours = Math.floor(songDuration / 3600);\n  const isLong = wholeHours > 0;\n  return isLong;\n};\n\nconst getTimeValues = (duration, fraction) => {\n  const secondsLeft = Math.round(duration * fraction);\n  const secondsOnTheMinute = secondsLeft % 60;\n  const minutesLeft = Math.floor(secondsLeft / 60);\n  const minutesOnTheHour = minutesLeft % 60;\n  const hoursLeft = Math.floor(minutesLeft / 60);\n  const hoursOnTheDay = hoursLeft % 24;\n  return [hoursOnTheDay, minutesOnTheHour, secondsOnTheMinute];\n};\n\nconst padTime = (hours, minutes, seconds, isLong) => {\n  const paddedHours = String(hours).padStart(2, '0');\n  const paddedMinutes = String(minutes).padStart(2, '0');\n  const paddedSeconds = String(seconds).padStart(2, '0');\n  const paddedMinsAndSecs = `${paddedMinutes}:${paddedSeconds}`;\n  const paddedTime = isLong ? `${paddedHours}:${paddedMinsAndSecs}` : paddedMinsAndSecs;\n  return paddedTime;\n};","map":{"version":3,"names":["formatTime","songDuration","songFraction","hours","minutes","seconds","getTimeValues","isLong","getIsLong","formattedFraction","padTime","wholeHours","Math","floor","duration","fraction","secondsLeft","round","secondsOnTheMinute","minutesLeft","minutesOnTheHour","hoursLeft","hoursOnTheDay","paddedHours","String","padStart","paddedMinutes","paddedSeconds","paddedMinsAndSecs","paddedTime"],"sources":["C:/Users/adamg/Documents/temp/sky/Sky-Music-Project/my-app/src/utility/format/formatBarTime.js"],"sourcesContent":["export const formatTime = (songDuration, songFraction) => {\r\n    const [hours, minutes, seconds] = getTimeValues(songDuration, songFraction);\r\n    const isLong = getIsLong(songDuration);\r\n    const formattedFraction = padTime(hours, minutes, seconds, isLong);\r\n    return formattedFraction;\r\n    // if ((isNaN(hours) || isNaN(minutes)) || isNaN(seconds)) {\r\n    //     const defaultTime = padTime(0, 0, 0);\r\n    //     return defaultTime;\r\n    // } else {\r\n    //     const formattedFraction = padTime(hours, minutes, seconds);\r\n    //     return formattedFraction;\r\n    // }\r\n};\r\n\r\nconst getIsLong = (songDuration) => {\r\n    const wholeHours = Math.floor(songDuration/3600);\r\n    const isLong = wholeHours > 0;\r\n    return isLong;\r\n};\r\n\r\nconst getTimeValues = (duration, fraction) => {\r\n    const secondsLeft = Math.round(duration * fraction);\r\n    const secondsOnTheMinute = secondsLeft % 60;\r\n    \r\n    const minutesLeft = Math.floor(secondsLeft / 60);\r\n    const minutesOnTheHour = minutesLeft % 60;\r\n\r\n    const hoursLeft = Math.floor(minutesLeft / 60);\r\n    const hoursOnTheDay = hoursLeft % 24;\r\n\r\n    return [hoursOnTheDay, minutesOnTheHour, secondsOnTheMinute];\r\n};\r\n\r\nconst padTime = (hours, minutes, seconds, isLong) => {\r\n    const paddedHours = String(hours).padStart(2, '0');\r\n    const paddedMinutes = String(minutes).padStart(2, '0');\r\n    const paddedSeconds = String(seconds).padStart(2, '0');\r\n    const paddedMinsAndSecs = `${paddedMinutes}:${paddedSeconds}`;\r\n    const paddedTime = isLong ? `${paddedHours}:${paddedMinsAndSecs}`\r\n                              : paddedMinsAndSecs;\r\n    return paddedTime;\r\n};"],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAG,CAACC,YAAD,EAAeC,YAAf,KAAgC;EACtD,MAAM,CAACC,KAAD,EAAQC,OAAR,EAAiBC,OAAjB,IAA4BC,aAAa,CAACL,YAAD,EAAeC,YAAf,CAA/C;EACA,MAAMK,MAAM,GAAGC,SAAS,CAACP,YAAD,CAAxB;EACA,MAAMQ,iBAAiB,GAAGC,OAAO,CAACP,KAAD,EAAQC,OAAR,EAAiBC,OAAjB,EAA0BE,MAA1B,CAAjC;EACA,OAAOE,iBAAP,CAJsD,CAKtD;EACA;EACA;EACA;EACA;EACA;EACA;AACH,CAZM;;AAcP,MAAMD,SAAS,GAAIP,YAAD,IAAkB;EAChC,MAAMU,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWZ,YAAY,GAAC,IAAxB,CAAnB;EACA,MAAMM,MAAM,GAAGI,UAAU,GAAG,CAA5B;EACA,OAAOJ,MAAP;AACH,CAJD;;AAMA,MAAMD,aAAa,GAAG,CAACQ,QAAD,EAAWC,QAAX,KAAwB;EAC1C,MAAMC,WAAW,GAAGJ,IAAI,CAACK,KAAL,CAAWH,QAAQ,GAAGC,QAAtB,CAApB;EACA,MAAMG,kBAAkB,GAAGF,WAAW,GAAG,EAAzC;EAEA,MAAMG,WAAW,GAAGP,IAAI,CAACC,KAAL,CAAWG,WAAW,GAAG,EAAzB,CAApB;EACA,MAAMI,gBAAgB,GAAGD,WAAW,GAAG,EAAvC;EAEA,MAAME,SAAS,GAAGT,IAAI,CAACC,KAAL,CAAWM,WAAW,GAAG,EAAzB,CAAlB;EACA,MAAMG,aAAa,GAAGD,SAAS,GAAG,EAAlC;EAEA,OAAO,CAACC,aAAD,EAAgBF,gBAAhB,EAAkCF,kBAAlC,CAAP;AACH,CAXD;;AAaA,MAAMR,OAAO,GAAG,CAACP,KAAD,EAAQC,OAAR,EAAiBC,OAAjB,EAA0BE,MAA1B,KAAqC;EACjD,MAAMgB,WAAW,GAAGC,MAAM,CAACrB,KAAD,CAAN,CAAcsB,QAAd,CAAuB,CAAvB,EAA0B,GAA1B,CAApB;EACA,MAAMC,aAAa,GAAGF,MAAM,CAACpB,OAAD,CAAN,CAAgBqB,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,CAAtB;EACA,MAAME,aAAa,GAAGH,MAAM,CAACnB,OAAD,CAAN,CAAgBoB,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,CAAtB;EACA,MAAMG,iBAAiB,GAAI,GAAEF,aAAc,IAAGC,aAAc,EAA5D;EACA,MAAME,UAAU,GAAGtB,MAAM,GAAI,GAAEgB,WAAY,IAAGK,iBAAkB,EAAvC,GACGA,iBAD5B;EAEA,OAAOC,UAAP;AACH,CARD"},"metadata":{},"sourceType":"module"}